services:
  # Development service
  app-dev:
    container_name: pax-vote-dev
    build:
      context: ..
      dockerfile: Dockerfile
    env_file:
      - ../.env.dev
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - /app/node_modules
      - uploads-dev:/app/uploads
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - dev
    restart: unless-stopped

  # Production service
#  app-prod:
#    container_name: pax-vote-prod
#    build:
#      context: ..
#      dockerfile: ../Dockerfile.prod
#    env_file:
#      - ../.env.prod
#    ports:
#      - '8080:3000'
#    volumes:
#      - uploads-prod:/app/uploads
#    depends_on:
#      db:
#        condition: service_healthy
#      redis:
#        condition: service_healthy
#    networks:
#      - app-network
#    profiles:
#      - prod
#    restart: unless-stopped
#    deploy:
#      resources:
#        limits:
#          memory: 512M
#        reservations:
#          memory: 256M

  # Database service (PostgreSQL)
  db:
    image: postgres:17-alpine
    container_name: pax-vote-db-1
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-voting_app}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - '5433:5432'
    volumes:
      - db-1-data:/var/lib/postgresql/data
      - db-1-backups:/backups
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-voting_app}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis service for caching and sessions
#  redis:
#    image: redis:7-alpine
#    container_name: pax-voting-redis
#    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru
#    ports:
#      - '6379:6379'
#    volumes:
#      - redis-data:/data
#    networks:
#      - app-network
#    restart: unless-stopped
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#      start_period: 10s
#    deploy:
#      resources:
#        limits:
#          memory: 128M
#        reservations:
#          memory: 64M

#  # pgAdmin service (Development only)
#  pgadmin:
#    image: dpage/pgadmin4:latest
#    container_name: nestjs-pgadmin4
#    environment:
#      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_EMAIL:-admin@example.com}
#      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_PASSWORD:-admin}
#      - PGADMIN_DISABLE_POSTFIX=true
#    ports:
#      - '5050:80'
#    volumes:
#      - pgadmin-data:/var/lib/pgadmin
#    depends_on:
#      db-1:
#        condition: service_healthy
#    networks:
#      - app-network
#    profiles:
#      - dev
#    restart: unless-stopped

  # Database backup service (Production only)
  db-backup:
    image: postgres:17-alpine
    container_name: pax-voting-backup
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-voting_app}
    volumes:
      - db-1-backups:/backups
      - ./scripts/backup.sh:/backup.sh:ro
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    profiles:
      - prod
    restart: "no"
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        while true; do
          sleep 86400  # 24 hours
          pg_dump -h db -U $$POSTGRES_USER -d $$POSTGRES_DB > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          # Keep only last 7 days of backups
          find /backups -name "backup_*.sql" -mtime +7 -delete
        done

networks:
  app-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  db-data:
  db-backups:
  redis-data:
  pgadmin-data:
  uploads-dev:
  uploads-prod: