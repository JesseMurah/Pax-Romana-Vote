import { PrismaService } from '../../../db';
import { UserRoles } from './enums/user-roles.enum';
import { IUser, IUserProfile } from './interfaces/user.interface';
import { CreateUserDto } from './dto/create-user.dto';
import { CreateAdminDTO } from './dto/create-admin.dto';
import { UpdateUserDTO } from './dto/update-user.dto';
import { UserStatsDto } from './dto/user-profile.dto';
import { UserRole } from '@prisma/client/index';
export declare class UsersService {
    private prisma;
    private logger;
    constructor(prisma: PrismaService);
    create(createUserDto: CreateUserDto): Promise<{
        college: string | null;
        createdAt: Date;
        email: string;
        emailVerified: boolean;
        hasVoted: boolean;
        id: string;
        inkVerified: boolean;
        isActive: boolean;
        lastLoginAt: Date | null;
        level: string | null;
        name: string;
        password: string | null;
        phone: string | null;
        phoneVerified: boolean;
        programme: string | null;
        role: UserRole;
        subgroup: string | null;
        subgroupId: string | null;
        updatedAt: Date;
    }>;
    createAdmin(createAdminDto: CreateAdminDTO): Promise<IUser>;
    findByPhone(phone: string): Promise<IUser | null>;
    findByEmail(email: string): Promise<IUser | null>;
    findById(id: string): Promise<IUser | null>;
    update(id: string, updateUserDto: UpdateUserDTO): Promise<IUser>;
    updatePhoneVerificationStatus(id: string, phoneVerified?: boolean, emailVerified?: boolean): Promise<IUser>;
    updateLastLogin(id: string): Promise<void>;
    getUserProfile(id: string): Promise<IUserProfile>;
    findAll(page?: number, limit?: number, role?: UserRoles): Promise<{
        users: IUser[];
        total: number;
        page: number;
        limit: number;
    }>;
    getECMembers(): Promise<IUser[]>;
    getAdmins(): Promise<IUser[]>;
    updateUserStatus(userId: string, isActive: boolean): Promise<{
        name: string;
        phone: string | null;
        email: string;
        role: import(".prisma/client").$Enums.UserRole;
        isActive: boolean;
        id: string;
        updatedAt: Date;
    }>;
    getUserStats(): Promise<UserStatsDto>;
    validateAdminCredentials(phone: string, password: string): Promise<IUser | null>;
    softDelete(id: string): Promise<IUser>;
    suspendUser(id: string): Promise<IUser>;
    reactivateUser(id: string): Promise<IUser>;
    createOrUpdateUser(data: {
        phone: string;
        name: string;
        email: string;
        role: UserRole;
    }): Promise<{
        subgroup: string | null;
        programme: string | null;
        name: string;
        phone: string | null;
        email: string;
        password: string | null;
        role: import(".prisma/client").$Enums.UserRole;
        level: string | null;
        college: string | null;
        phoneVerified: boolean;
        emailVerified: boolean;
        isActive: boolean;
        inkVerified: boolean;
        id: string;
        hasVoted: boolean;
        lastLoginAt: Date | null;
        createdAt: Date;
        updatedAt: Date;
        subgroupId: string | null;
    }>;
}
