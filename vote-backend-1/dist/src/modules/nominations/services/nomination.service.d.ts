import { PrismaService } from '../../../../db';
import { DeadlineService } from '../../common/utils/deadline.service';
import { CreateNominationDto } from '../dto/create-nomination.dto';
import { NominationStatus } from '@prisma/client/index';
import { UsersService } from "../../users/users.service";
import { CloudinaryService } from '../../file-upload/services/cloudinary.service';
export declare class NominationService {
    prisma: PrismaService;
    private deadlineService;
    usersService: UsersService;
    private cloudinaryService;
    constructor(prisma: PrismaService, deadlineService: DeadlineService, usersService: UsersService, cloudinaryService: CloudinaryService);
    createNomination(createNominationDto: CreateNominationDto, file?: Express.Multer.File, userId?: string): Promise<{
        nominatorVerification: {
            subgroup: string;
            programme: string;
            name: string;
            email: string;
            level: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            nominationId: string;
            status: string;
            userId: string | null;
            comments: string | null;
            contact: string;
            verifiedAt: Date | null;
            declinedAt: Date | null;
        } | null;
        guarantorVerifications: {
            subgroup: string;
            programme: string;
            name: string;
            email: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            nominationId: string;
            status: string;
            userId: string | null;
            comments: string | null;
            contact: string;
            verifiedAt: Date | null;
            declinedAt: Date | null;
            verificationTokenId: string | null;
        }[];
    } & {
        id: string;
        createdAt: Date;
        updatedAt: Date;
        subgroupId: string | null;
        aspirantId: string;
        nomineeName: string;
        nomineeEmail: string;
        nomineeContact: string;
        nomineePosition: import(".prisma/client").$Enums.Candidate_Position;
        photoUrl: string | null;
        photoPublicId: string | null;
        status: import(".prisma/client").$Enums.NominationStatus;
        nomineeCollege: string;
        nomineeDepartment: string;
        nomineeDateOfBirth: Date;
        nomineeHostel: string;
        nomineeRoom: string;
        nomineeSex: string;
        nomineeCwa: string;
        nomineeProgramme: string;
        nomineeLevel: string;
        nomineeParish: string;
        nomineeNationality: string;
        nomineeRegion: string;
        nomineeSubgroups: string[];
        nomineeEducation: string[];
        hasLeadershipPosition: boolean;
        leadershipPositions: string[];
        hasServedCommittee: boolean;
        committees: string[];
        skills: string[];
        visionForOffice: string[];
        knowledgeAboutOffice: string[];
        approvalCount: number;
        rejectionCount: number;
        reviewedAt: Date | null;
        rejectionReason: string | null;
        userId: string | null;
    }>;
    getPendingVerifications(): Promise<({
        nominatorVerification: ({
            nomination: {
                nomineeName: string;
                nomineePosition: import(".prisma/client").$Enums.Candidate_Position;
            };
        } & {
            subgroup: string;
            programme: string;
            name: string;
            email: string;
            level: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            nominationId: string;
            status: string;
            userId: string | null;
            comments: string | null;
            contact: string;
            verifiedAt: Date | null;
            declinedAt: Date | null;
        }) | null;
        guarantorVerification: ({
            nomination: {
                nomineeName: string;
                nomineePosition: import(".prisma/client").$Enums.Candidate_Position;
            };
        } & {
            subgroup: string;
            programme: string;
            name: string;
            email: string;
            id: string;
            createdAt: Date;
            updatedAt: Date;
            nominationId: string;
            status: string;
            userId: string | null;
            comments: string | null;
            contact: string;
            verifiedAt: Date | null;
            declinedAt: Date | null;
            verificationTokenId: string | null;
        }) | null;
    } & {
        phone: string | null;
        email: string | null;
        id: string;
        createdAt: Date;
        token: string;
        type: import(".prisma/client").$Enums.TokenType;
        expiresAt: Date;
        used: boolean;
        nominatorVerificationId: string | null;
        guarantorVerificationId: string | null;
    })[]>;
    findAll(filters?: {
        status?: NominationStatus;
        position?: string;
        aspirantId?: string;
    }): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        subgroupId: string | null;
        aspirantId: string;
        nomineeName: string;
        nomineeEmail: string;
        nomineeContact: string;
        nomineePosition: import(".prisma/client").$Enums.Candidate_Position;
        photoUrl: string | null;
        photoPublicId: string | null;
        status: import(".prisma/client").$Enums.NominationStatus;
        nomineeCollege: string;
        nomineeDepartment: string;
        nomineeDateOfBirth: Date;
        nomineeHostel: string;
        nomineeRoom: string;
        nomineeSex: string;
        nomineeCwa: string;
        nomineeProgramme: string;
        nomineeLevel: string;
        nomineeParish: string;
        nomineeNationality: string;
        nomineeRegion: string;
        nomineeSubgroups: string[];
        nomineeEducation: string[];
        hasLeadershipPosition: boolean;
        leadershipPositions: string[];
        hasServedCommittee: boolean;
        committees: string[];
        skills: string[];
        visionForOffice: string[];
        knowledgeAboutOffice: string[];
        approvalCount: number;
        rejectionCount: number;
        reviewedAt: Date | null;
        rejectionReason: string | null;
        userId: string | null;
    }[]>;
    findOne(id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        subgroupId: string | null;
        aspirantId: string;
        nomineeName: string;
        nomineeEmail: string;
        nomineeContact: string;
        nomineePosition: import(".prisma/client").$Enums.Candidate_Position;
        photoUrl: string | null;
        photoPublicId: string | null;
        status: import(".prisma/client").$Enums.NominationStatus;
        nomineeCollege: string;
        nomineeDepartment: string;
        nomineeDateOfBirth: Date;
        nomineeHostel: string;
        nomineeRoom: string;
        nomineeSex: string;
        nomineeCwa: string;
        nomineeProgramme: string;
        nomineeLevel: string;
        nomineeParish: string;
        nomineeNationality: string;
        nomineeRegion: string;
        nomineeSubgroups: string[];
        nomineeEducation: string[];
        hasLeadershipPosition: boolean;
        leadershipPositions: string[];
        hasServedCommittee: boolean;
        committees: string[];
        skills: string[];
        visionForOffice: string[];
        knowledgeAboutOffice: string[];
        approvalCount: number;
        rejectionCount: number;
        reviewedAt: Date | null;
        rejectionReason: string | null;
        userId: string | null;
    }>;
    updateStatus(id: string, status: NominationStatus, reason?: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        subgroupId: string | null;
        aspirantId: string;
        nomineeName: string;
        nomineeEmail: string;
        nomineeContact: string;
        nomineePosition: import(".prisma/client").$Enums.Candidate_Position;
        photoUrl: string | null;
        photoPublicId: string | null;
        status: import(".prisma/client").$Enums.NominationStatus;
        nomineeCollege: string;
        nomineeDepartment: string;
        nomineeDateOfBirth: Date;
        nomineeHostel: string;
        nomineeRoom: string;
        nomineeSex: string;
        nomineeCwa: string;
        nomineeProgramme: string;
        nomineeLevel: string;
        nomineeParish: string;
        nomineeNationality: string;
        nomineeRegion: string;
        nomineeSubgroups: string[];
        nomineeEducation: string[];
        hasLeadershipPosition: boolean;
        leadershipPositions: string[];
        hasServedCommittee: boolean;
        committees: string[];
        skills: string[];
        visionForOffice: string[];
        knowledgeAboutOffice: string[];
        approvalCount: number;
        rejectionCount: number;
        reviewedAt: Date | null;
        rejectionReason: string | null;
        userId: string | null;
    }>;
    getNominationsByPosition(position: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        subgroupId: string | null;
        aspirantId: string;
        nomineeName: string;
        nomineeEmail: string;
        nomineeContact: string;
        nomineePosition: import(".prisma/client").$Enums.Candidate_Position;
        photoUrl: string | null;
        photoPublicId: string | null;
        status: import(".prisma/client").$Enums.NominationStatus;
        nomineeCollege: string;
        nomineeDepartment: string;
        nomineeDateOfBirth: Date;
        nomineeHostel: string;
        nomineeRoom: string;
        nomineeSex: string;
        nomineeCwa: string;
        nomineeProgramme: string;
        nomineeLevel: string;
        nomineeParish: string;
        nomineeNationality: string;
        nomineeRegion: string;
        nomineeSubgroups: string[];
        nomineeEducation: string[];
        hasLeadershipPosition: boolean;
        leadershipPositions: string[];
        hasServedCommittee: boolean;
        committees: string[];
        skills: string[];
        visionForOffice: string[];
        knowledgeAboutOffice: string[];
        approvalCount: number;
        rejectionCount: number;
        reviewedAt: Date | null;
        rejectionReason: string | null;
        userId: string | null;
    }[]>;
    getStatistics(): Promise<{
        total: number;
        approved: number;
        pending: number;
        rejected: number;
        timeRemaining: {
            days: number;
            hours: number;
            minutes: number;
            seconds: number;
        };
    }>;
}
