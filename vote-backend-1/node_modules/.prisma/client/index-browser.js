
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phone: 'phone',
  password: 'password',
  role: 'role',
  programme: 'programme',
  level: 'level',
  subgroup: 'subgroup',
  college: 'college',
  phoneVerified: 'phoneVerified',
  emailVerified: 'emailVerified',
  isActive: 'isActive',
  hasVoted: 'hasVoted',
  inkVerified: 'inkVerified',
  lastLoginAt: 'lastLoginAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subgroupId: 'subgroupId'
};

exports.Prisma.NominationScalarFieldEnum = {
  id: 'id',
  aspirantId: 'aspirantId',
  nomineeName: 'nomineeName',
  nomineeEmail: 'nomineeEmail',
  nomineeContact: 'nomineeContact',
  nomineePosition: 'nomineePosition',
  photoUrl: 'photoUrl',
  photoPublicId: 'photoPublicId',
  status: 'status',
  nomineeCollege: 'nomineeCollege',
  nomineeDepartment: 'nomineeDepartment',
  nomineeDateOfBirth: 'nomineeDateOfBirth',
  nomineeHostel: 'nomineeHostel',
  nomineeRoom: 'nomineeRoom',
  nomineeSex: 'nomineeSex',
  nomineeCwa: 'nomineeCwa',
  nomineeProgramme: 'nomineeProgramme',
  nomineeLevel: 'nomineeLevel',
  nomineeParish: 'nomineeParish',
  nomineeNationality: 'nomineeNationality',
  nomineeRegion: 'nomineeRegion',
  nomineeSubgroups: 'nomineeSubgroups',
  nomineeEducation: 'nomineeEducation',
  hasLeadershipPosition: 'hasLeadershipPosition',
  leadershipPositions: 'leadershipPositions',
  hasServedCommittee: 'hasServedCommittee',
  committees: 'committees',
  skills: 'skills',
  visionForOffice: 'visionForOffice',
  knowledgeAboutOffice: 'knowledgeAboutOffice',
  approvalCount: 'approvalCount',
  rejectionCount: 'rejectionCount',
  reviewedAt: 'reviewedAt',
  rejectionReason: 'rejectionReason',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  subgroupId: 'subgroupId'
};

exports.Prisma.NominatorVerificationScalarFieldEnum = {
  id: 'id',
  nominationId: 'nominationId',
  name: 'name',
  email: 'email',
  contact: 'contact',
  programme: 'programme',
  level: 'level',
  subgroup: 'subgroup',
  status: 'status',
  comments: 'comments',
  verifiedAt: 'verifiedAt',
  declinedAt: 'declinedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.GuarantorVerificationScalarFieldEnum = {
  id: 'id',
  nominationId: 'nominationId',
  name: 'name',
  email: 'email',
  contact: 'contact',
  programme: 'programme',
  subgroup: 'subgroup',
  status: 'status',
  comments: 'comments',
  verifiedAt: 'verifiedAt',
  declinedAt: 'declinedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  verificationTokenId: 'verificationTokenId',
  userId: 'userId'
};

exports.Prisma.EcReviewScalarFieldEnum = {
  id: 'id',
  nominationId: 'nominationId',
  reviewerId: 'reviewerId',
  approved: 'approved',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  type: 'type',
  email: 'email',
  phone: 'phone',
  expiresAt: 'expiresAt',
  used: 'used',
  createdAt: 'createdAt',
  nominatorVerificationId: 'nominatorVerificationId',
  guarantorVerificationId: 'guarantorVerificationId'
};

exports.Prisma.CandidateScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  position: 'position',
  photoUrl: 'photoUrl',
  photoPublicId: 'photoPublicId',
  biography: 'biography',
  displayOrder: 'displayOrder',
  isActive: 'isActive',
  candidateNumber: 'candidateNumber',
  nominationId: 'nominationId',
  voteCount: 'voteCount'
};

exports.Prisma.VotingSessionScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  sessionId: 'sessionId',
  voterHash: 'voterHash',
  deviceFingerprint: 'deviceFingerprint',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  status: 'status',
  startTime: 'startTime',
  endTime: 'endTime',
  expiresAt: 'expiresAt',
  isValid: 'isValid',
  userId: 'userId'
};

exports.Prisma.VoteScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  encryptedVote: 'encryptedVote',
  voterHash: 'voterHash',
  submissionTime: 'submissionTime',
  deviceFingerprint: 'deviceFingerprint',
  ipAddress: 'ipAddress',
  isValid: 'isValid',
  sessionId: 'sessionId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  action: 'action',
  entity: 'entity',
  entityId: 'entityId',
  oldValues: 'oldValues',
  newValues: 'newValues',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  userId: 'userId'
};

exports.Prisma.SubgroupScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  description: 'description',
  isActive: 'isActive'
};

exports.Prisma.ProgrammeScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  name: 'name',
  college: 'college',
  duration: 'duration',
  isActive: 'isActive'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  key: 'key',
  value: 'value',
  type: 'type'
};

exports.Prisma.ElectionTimelineScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  phase: 'phase',
  startDate: 'startDate',
  endDate: 'endDate',
  gracePeriodHours: 'gracePeriodHours',
  isActive: 'isActive',
  automaticTransition: 'automaticTransition'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  VOTER: 'VOTER',
  ASPIRANT: 'ASPIRANT',
  EC_MEMBER: 'EC_MEMBER',
  SUPER_ADMIN: 'SUPER_ADMIN',
  ADMIN: 'ADMIN'
};

exports.Candidate_Position = exports.$Enums.Candidate_Position = {
  PRESIDENT: 'PRESIDENT',
  VICE_PRESIDENT: 'VICE_PRESIDENT',
  GEN_SECRETARY: 'GEN_SECRETARY',
  FINANCIAL_SECRETARY: 'FINANCIAL_SECRETARY',
  ORGANIZING_SECRETARY_MAIN: 'ORGANIZING_SECRETARY_MAIN',
  ORGANIZING_SECRETARY_ASST: 'ORGANIZING_SECRETARY_ASST',
  PRO_MAIN: 'PRO_MAIN',
  PRO_ASSISTANT: 'PRO_ASSISTANT',
  WOMEN_COMMISSIONER: 'WOMEN_COMMISSIONER'
};

exports.NominationStatus = exports.$Enums.NominationStatus = {
  PENDING: 'PENDING',
  AWAITING_VERIFICATION: 'AWAITING_VERIFICATION',
  PARTIALLY_VERIFIED: 'PARTIALLY_VERIFIED',
  VERIFIED: 'VERIFIED',
  UNDER_REVIEW: 'UNDER_REVIEW',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  WITHDRAWN: 'WITHDRAWN'
};

exports.TokenType = exports.$Enums.TokenType = {
  NOMINATOR_VERIFICATION: 'NOMINATOR_VERIFICATION',
  GUARANTOR_VERIFICATION: 'GUARANTOR_VERIFICATION',
  ONE_VERIFICATION: 'ONE_VERIFICATION',
  PASSWORD_RESET: 'PASSWORD_RESET'
};

exports.VotingStatus = exports.$Enums.VotingStatus = {
  NOT_STARTED: 'NOT_STARTED',
  ACTIVE: 'ACTIVE',
  COMPLETED: 'COMPLETED',
  SUSPENDED: 'SUSPENDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Nomination: 'Nomination',
  NominatorVerification: 'NominatorVerification',
  GuarantorVerification: 'GuarantorVerification',
  EcReview: 'EcReview',
  VerificationToken: 'VerificationToken',
  Candidate: 'Candidate',
  VotingSession: 'VotingSession',
  Vote: 'Vote',
  AuditLog: 'AuditLog',
  Subgroup: 'Subgroup',
  Programme: 'Programme',
  SystemConfig: 'SystemConfig',
  ElectionTimeline: 'ElectionTimeline'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
